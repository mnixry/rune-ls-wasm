From 43b40a123cb610465f4183f2d140163a5c46d3d1 Mon Sep 17 00:00:00 2001
From: HexMix <32300164+mnixry@users.noreply.github.com>
Date: Sun, 5 Oct 2025 22:04:35 +0800
Subject: [PATCH] patch languageserver for emscripten platform

---
 .cargo/config.toml                    | 21 +++++++++++++++++++++
 crates/rune-languageserver/Cargo.toml | 24 +++++++++++++++++++++++-
 crates/rune/src/languageserver/mod.rs | 19 ++++++++++++++++---
 3 files changed, 60 insertions(+), 4 deletions(-)
 create mode 100644 .cargo/config.toml

diff --git a/.cargo/config.toml b/.cargo/config.toml
new file mode 100644
index 00000000..9e1ba82f
--- /dev/null
+++ b/.cargo/config.toml
@@ -0,0 +1,21 @@
+[target.'cfg(target_family = "wasm")']
+rustflags = [
+    "--cfg", "tokio_unstable",
+    "-C", "link-arg=-pthread", "-C", "link-arg=-flto", "-C", "link-arg=-g",
+    "-C", "target-feature=+atomics,+bulk-memory,+mutable-globals",
+    "-C", "link-arg=-s", "-C", "link-arg=MODULARIZE=1",
+    "-C", "link-arg=-s", "-C", "link-arg=FORCE_FILESYSTEM=1",
+    "-C", "link-arg=-s", "-C", "link-arg=EXPORTED_RUNTIME_METHODS=FS,ENV",
+    "-C", "link-arg=-s", "-C", "link-arg=ASYNCIFY=1",
+    "-C", "link-arg=-s", "-C", "link-arg=EXPORT_ES6=1",
+    "-C", "link-arg=-s", "-C", "link-arg=PTHREAD_POOL_SIZE=4",
+]
+
+[unstable]
+build-std = ["core", "std", "alloc", "proc_macro", "panic_abort"]
+
+[profile.release]
+lto = true
+opt-level = "z"
+codegen-units = 1
+panic = "abort"
diff --git a/crates/rune-languageserver/Cargo.toml b/crates/rune-languageserver/Cargo.toml
index 10338d54..51935297 100644
--- a/crates/rune-languageserver/Cargo.toml
+++ b/crates/rune-languageserver/Cargo.toml
@@ -14,14 +14,36 @@ keywords = ["language", "scripting", "scripting-language"]
 categories = ["parser-implementations"]
 
 [dependencies]
-tokio = { version = "1.28.1", features = ["full"] }
+tokio = { version = "1.28.1", features = ["sync", "macros", "io-util", "rt", "time", "parking_lot"] }
 anyhow = "1.0.71"
 tracing = "0.1.37"
 tracing-appender = "0.2.2"
 tracing-subscriber = { version = "0.3.17", features = ["env-filter"] }
 
 rune = { version = "0.14.0", path = "../rune", features = ["languageserver"] }
+
+[target.'cfg(not(target_family = "wasm"))'.dependencies]
 rune-modules = { version = "0.14.0", path = "../rune-modules", features = ["full"] }
 
+[target.'cfg(target_family = "wasm")'.dependencies]
+rune-modules = { version = "0.14.0", path = "../rune-modules", default-features = false, features = [
+    "time",
+    "json",
+    "toml",
+    "fs",
+    "rand",
+    "os_rng",
+    "small_rng",
+    "std_rng",
+    "thread_rng",
+    "io",
+    "fmt",
+    "base64",
+] }
+
+[dependencies.parking_lot]
+version = "*"
+features = ["nightly"]
+
 [build-dependencies]
 anyhow = "1.0.71"
diff --git a/crates/rune/src/languageserver/mod.rs b/crates/rune/src/languageserver/mod.rs
index 4cbb5f11..09481a89 100644
--- a/crates/rune/src/languageserver/mod.rs
+++ b/crates/rune/src/languageserver/mod.rs
@@ -27,6 +27,11 @@ use crate::{Context, Options};
 
 use self::state::StateEncoding;
 
+extern "C" {
+    /// Sleep for the given number of milliseconds.
+    pub fn emscripten_sleep(ms: ::std::os::raw::c_uint);
+}
+
 enum Language {
     Rune,
     Other,
@@ -53,9 +58,17 @@ pub async fn run(context: Context, options: Options) -> Result<()> {
                 rebuild.set(rebuild_notify.notified());
             },
             frame = input.next() => {
-                let frame = match frame? {
-                    Some(frame) => frame,
-                    None => break,
+                let frame = match frame {
+                    Ok(Some(frame)) => frame,
+                    Ok(None) => break,
+                    Err(e) => {
+                        // check if is EAGAIN
+                        if e.downcast_ref::<std::io::Error>().map(|e| e.kind() == std::io::ErrorKind::WouldBlock).unwrap_or(false) {
+                            unsafe { emscripten_sleep(100); }
+                            continue;
+                        }
+                        return Err(e);
+                    }
                 };
 
                 let incoming: envelope::IncomingMessage = serde_json::from_slice(frame.content)?;
-- 
2.51.0

